/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.dianping.dpsf.protocol.thrift;

import java.nio.ByteBuffer;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.TBase;
import org.apache.thrift.TBaseHelper;
import org.apache.thrift.TException;
import org.apache.thrift.TFieldIdEnum;
import org.apache.thrift.TFieldRequirementType;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import org.apache.thrift.protocol.TField;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TProtocolUtil;
import org.apache.thrift.protocol.TStruct;
import org.apache.thrift.protocol.TType;

public class Request implements TBase<Request, Request._Fields>, java.io.Serializable, Cloneable {
	private static final long serialVersionUID = -5451360537890851044L;

	private static final TStruct STRUCT_DESC = new TStruct("Request");

	private static final TField MESSAGE_TYPE_FIELD_DESC = new TField("messageType", TType.I32, (short) 1);
	private static final TField CALL_TYPE_FIELD_DESC = new TField("callType", TType.I32, (short) 2);
	private static final TField TRANSFER_ID_FIELD_DESC = new TField("transferId", TType.I64, (short) 3);
	private static final TField RPC_VERSION_FIELD_DESC = new TField("rpcVersion", TType.STRING, (short) 4);
	private static final TField TIMEOUT_FIELD_DESC = new TField("timeout", TType.I32, (short) 5);
	private static final TField SERVICE_NAME_FIELD_DESC = new TField("serviceName", TType.STRING, (short) 6);
	private static final TField METHOD_NAME_FIELD_DESC = new TField("methodName", TType.STRING, (short) 7);
	private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.STRING, (short) 8);
	private static final TField ARGS_CLASS_NAME_FIELD_DESC = new TField("argsClassName", TType.STRING, (short) 9);

	public int messageType;
	public int callType;
	public long transferId;
	public String rpcVersion;
	public int timeout;
	public String serviceName;
	public String methodName;
	public transient ByteBuffer parameters;
	public String argsClassName;

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements TFieldIdEnum {
		MESSAGE_TYPE((short) 1, "messageType"), CALL_TYPE((short) 2, "callType"), TRANSFER_ID((short) 3, "transferId"), RPC_VERSION((short) 4, "rpcVersion"), TIMEOUT((short) 5, "timeout"), SERVICE_NAME((short) 6, "serviceName"), METHOD_NAME((short) 7, "methodName"), PARAMETERS((short) 8, "parameters"), ARGS_CLASS_NAME((short) 9, "argsClassName");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // MESSAGE_TYPE
				return MESSAGE_TYPE;
			case 2: // CALL_TYPE
				return CALL_TYPE;
			case 3: // TRANSFER_ID
				return TRANSFER_ID;
			case 4: // RPC_VERSION
				return RPC_VERSION;
			case 5: // TIMEOUT
				return TIMEOUT;
			case 6: // SERVICE_NAME
				return SERVICE_NAME;
			case 7: // METHOD_NAME
				return METHOD_NAME;
			case 8: // PARAMETERS
				return PARAMETERS;
			case 9: // ARGS_CLASS_NAME
				return ARGS_CLASS_NAME;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __MESSAGETYPE_ISSET_ID = 0;
	private static final int __CALLTYPE_ISSET_ID = 1;
	private static final int __TRANSFERID_ISSET_ID = 2;
	private static final int __TIMEOUT_ISSET_ID = 3;
	private BitSet __isset_bit_vector = new BitSet(4);

	public static final Map<_Fields, FieldMetaData> metaDataMap;
	static {
		Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.MESSAGE_TYPE, new FieldMetaData("messageType", TFieldRequirementType.REQUIRED, new FieldValueMetaData(TType.I32)));
		tmpMap.put(_Fields.CALL_TYPE, new FieldMetaData("callType", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.I32)));
		tmpMap.put(_Fields.TRANSFER_ID, new FieldMetaData("transferId", TFieldRequirementType.REQUIRED, new FieldValueMetaData(TType.I64)));
		tmpMap.put(_Fields.RPC_VERSION, new FieldMetaData("rpcVersion", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
		tmpMap.put(_Fields.TIMEOUT, new FieldMetaData("timeout", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.I32)));
		tmpMap.put(_Fields.SERVICE_NAME, new FieldMetaData("serviceName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
		tmpMap.put(_Fields.METHOD_NAME, new FieldMetaData("methodName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
		tmpMap.put(_Fields.PARAMETERS, new FieldMetaData("parameters", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
		tmpMap.put(_Fields.ARGS_CLASS_NAME, new FieldMetaData("argsClassName", TFieldRequirementType.DEFAULT, new FieldValueMetaData(TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
	}

	public Request() {
	}

	public Request(int messageType, int callType, long transferId, String rpcVersion, int timeout, String serviceName, String methodName, ByteBuffer parameters, String argsClassName) {
		this();
		this.messageType = messageType;
		setMessageTypeIsSet(true);
		this.callType = callType;
		setCallTypeIsSet(true);
		this.transferId = transferId;
		setTransferIdIsSet(true);
		this.rpcVersion = rpcVersion;
		this.timeout = timeout;
		setTimeoutIsSet(true);
		this.serviceName = serviceName;
		this.methodName = methodName;
		this.parameters = parameters;
		this.argsClassName = argsClassName;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Request(Request other) {
		__isset_bit_vector.clear();
		__isset_bit_vector.or(other.__isset_bit_vector);
		this.messageType = other.messageType;
		this.callType = other.callType;
		this.transferId = other.transferId;
		if (other.isSetRpcVersion()) {
			this.rpcVersion = other.rpcVersion;
		}
		this.timeout = other.timeout;
		if (other.isSetServiceName()) {
			this.serviceName = other.serviceName;
		}
		if (other.isSetMethodName()) {
			this.methodName = other.methodName;
		}
		if (other.isSetParameters()) {
			this.parameters = ByteBuffer.wrap(new byte[other.parameters.limit() - other.parameters.arrayOffset()]);
			System.arraycopy(other.parameters.array(), other.parameters.arrayOffset(), parameters.array(), 0, other.parameters.limit() - other.parameters.arrayOffset());
		}
		if (other.isSetArgsClassName()) {
			this.argsClassName = other.argsClassName;
		}
	}

	public Request deepCopy() {
		return new Request(this);
	}

	@Deprecated
	public Request clone() {
		return new Request(this);
	}

	public void clear() {
		setMessageTypeIsSet(false);
		this.messageType = 0;
		setCallTypeIsSet(false);
		this.callType = 0;
		setTransferIdIsSet(false);
		this.transferId = 0;
		this.rpcVersion = null;
		setTimeoutIsSet(false);
		this.timeout = 0;
		this.serviceName = null;
		this.methodName = null;
		this.parameters = null;
		this.argsClassName = null;
	}

	public int getMessageType() {
		return this.messageType;
	}

	public Request setMessageType(int messageType) {
		this.messageType = messageType;
		setMessageTypeIsSet(true);
		return this;
	}

	public void unsetMessageType() {
		__isset_bit_vector.clear(__MESSAGETYPE_ISSET_ID);
	}

	/** Returns true if field messageType is set (has been asigned a value) and false otherwise */
	public boolean isSetMessageType() {
		return __isset_bit_vector.get(__MESSAGETYPE_ISSET_ID);
	}

	public void setMessageTypeIsSet(boolean value) {
		__isset_bit_vector.set(__MESSAGETYPE_ISSET_ID, value);
	}

	public int getCallType() {
		return this.callType;
	}

	public Request setCallType(int callType) {
		this.callType = callType;
		setCallTypeIsSet(true);
		return this;
	}

	public void unsetCallType() {
		__isset_bit_vector.clear(__CALLTYPE_ISSET_ID);
	}

	/** Returns true if field callType is set (has been asigned a value) and false otherwise */
	public boolean isSetCallType() {
		return __isset_bit_vector.get(__CALLTYPE_ISSET_ID);
	}

	public void setCallTypeIsSet(boolean value) {
		__isset_bit_vector.set(__CALLTYPE_ISSET_ID, value);
	}

	public long getTransferId() {
		return this.transferId;
	}

	public Request setTransferId(long transferId) {
		this.transferId = transferId;
		setTransferIdIsSet(true);
		return this;
	}

	public void unsetTransferId() {
		__isset_bit_vector.clear(__TRANSFERID_ISSET_ID);
	}

	/** Returns true if field transferId is set (has been asigned a value) and false otherwise */
	public boolean isSetTransferId() {
		return __isset_bit_vector.get(__TRANSFERID_ISSET_ID);
	}

	public void setTransferIdIsSet(boolean value) {
		__isset_bit_vector.set(__TRANSFERID_ISSET_ID, value);
	}

	public String getRpcVersion() {
		return this.rpcVersion;
	}

	public Request setRpcVersion(String rpcVersion) {
		this.rpcVersion = rpcVersion;
		return this;
	}

	public void unsetRpcVersion() {
		this.rpcVersion = null;
	}

	/** Returns true if field rpcVersion is set (has been asigned a value) and false otherwise */
	public boolean isSetRpcVersion() {
		return this.rpcVersion != null;
	}

	public void setRpcVersionIsSet(boolean value) {
		if (!value) {
			this.rpcVersion = null;
		}
	}

	public int getTimeout() {
		return this.timeout;
	}

	public Request setTimeout(int timeout) {
		this.timeout = timeout;
		setTimeoutIsSet(true);
		return this;
	}

	public void unsetTimeout() {
		__isset_bit_vector.clear(__TIMEOUT_ISSET_ID);
	}

	/** Returns true if field timeout is set (has been asigned a value) and false otherwise */
	public boolean isSetTimeout() {
		return __isset_bit_vector.get(__TIMEOUT_ISSET_ID);
	}

	public void setTimeoutIsSet(boolean value) {
		__isset_bit_vector.set(__TIMEOUT_ISSET_ID, value);
	}

	public String getServiceName() {
		return this.serviceName;
	}

	public Request setServiceName(String serviceName) {
		this.serviceName = serviceName;
		return this;
	}

	public void unsetServiceName() {
		this.serviceName = null;
	}

	/** Returns true if field serviceName is set (has been asigned a value) and false otherwise */
	public boolean isSetServiceName() {
		return this.serviceName != null;
	}

	public void setServiceNameIsSet(boolean value) {
		if (!value) {
			this.serviceName = null;
		}
	}

	public String getMethodName() {
		return this.methodName;
	}

	public Request setMethodName(String methodName) {
		this.methodName = methodName;
		return this;
	}

	public void unsetMethodName() {
		this.methodName = null;
	}

	/** Returns true if field methodName is set (has been asigned a value) and false otherwise */
	public boolean isSetMethodName() {
		return this.methodName != null;
	}

	public void setMethodNameIsSet(boolean value) {
		if (!value) {
			this.methodName = null;
		}
	}

	public ByteBuffer getParameters() {
		return this.parameters;
	}

	public Request setParameters(ByteBuffer parameters) {
		this.parameters = parameters;
		return this;
	}

	public void unsetParameters() {
		this.parameters = null;
	}

	/** Returns true if field parameters is set (has been asigned a value) and false otherwise */
	public boolean isSetParameters() {
		return this.parameters != null;
	}

	public void setParametersIsSet(boolean value) {
		if (!value) {
			this.parameters = null;
		}
	}

	public String getArgsClassName() {
		return this.argsClassName;
	}

	public Request setArgsClassName(String argsClassName) {
		this.argsClassName = argsClassName;
		return this;
	}

	public void unsetArgsClassName() {
		this.argsClassName = null;
	}

	/** Returns true if field argsClassName is set (has been asigned a value) and false otherwise */
	public boolean isSetArgsClassName() {
		return this.argsClassName != null;
	}

	public void setArgsClassNameIsSet(boolean value) {
		if (!value) {
			this.argsClassName = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case MESSAGE_TYPE:
			if (value == null) {
				unsetMessageType();
			} else {
				setMessageType((Integer) value);
			}
			break;

		case CALL_TYPE:
			if (value == null) {
				unsetCallType();
			} else {
				setCallType((Integer) value);
			}
			break;

		case TRANSFER_ID:
			if (value == null) {
				unsetTransferId();
			} else {
				setTransferId((Long) value);
			}
			break;

		case RPC_VERSION:
			if (value == null) {
				unsetRpcVersion();
			} else {
				setRpcVersion((String) value);
			}
			break;

		case TIMEOUT:
			if (value == null) {
				unsetTimeout();
			} else {
				setTimeout((Integer) value);
			}
			break;

		case SERVICE_NAME:
			if (value == null) {
				unsetServiceName();
			} else {
				setServiceName((String) value);
			}
			break;

		case METHOD_NAME:
			if (value == null) {
				unsetMethodName();
			} else {
				setMethodName((String) value);
			}
			break;

		case PARAMETERS:
			if (value == null) {
				unsetParameters();
			} else {
				setParameters((ByteBuffer) value);
			}
			break;

		case ARGS_CLASS_NAME:
			if (value == null) {
				unsetArgsClassName();
			} else {
				setArgsClassName((String) value);
			}
			break;

		}
	}

	public void setFieldValue(int fieldID, Object value) {
		setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case MESSAGE_TYPE:
			return new Integer(getMessageType());

		case CALL_TYPE:
			return new Integer(getCallType());

		case TRANSFER_ID:
			return new Long(getTransferId());

		case RPC_VERSION:
			return getRpcVersion();

		case TIMEOUT:
			return new Integer(getTimeout());

		case SERVICE_NAME:
			return getServiceName();

		case METHOD_NAME:
			return getMethodName();

		case PARAMETERS:
			return getParameters();

		case ARGS_CLASS_NAME:
			return getArgsClassName();

		}
		throw new IllegalStateException();
	}

	public Object getFieldValue(int fieldId) {
		return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
	}

	/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		switch (field) {
		case MESSAGE_TYPE:
			return isSetMessageType();
		case CALL_TYPE:
			return isSetCallType();
		case TRANSFER_ID:
			return isSetTransferId();
		case RPC_VERSION:
			return isSetRpcVersion();
		case TIMEOUT:
			return isSetTimeout();
		case SERVICE_NAME:
			return isSetServiceName();
		case METHOD_NAME:
			return isSetMethodName();
		case PARAMETERS:
			return isSetParameters();
		case ARGS_CLASS_NAME:
			return isSetArgsClassName();
		}
		throw new IllegalStateException();
	}

	public boolean isSet(int fieldID) {
		return isSet(_Fields.findByThriftIdOrThrow(fieldID));
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof Request)
			return this.equals((Request) that);
		return false;
	}

	private boolean equals(Request that) {
		if (that == null)
			return false;

		boolean this_present_messageType = true;
		boolean that_present_messageType = true;
		if (this_present_messageType || that_present_messageType) {
			if (!(this_present_messageType && that_present_messageType))
				return false;
			if (this.messageType != that.messageType)
				return false;
		}

		boolean this_present_callType = true;
		boolean that_present_callType = true;
		if (this_present_callType || that_present_callType) {
			if (!(this_present_callType && that_present_callType))
				return false;
			if (this.callType != that.callType)
				return false;
		}

		boolean this_present_transferId = true;
		boolean that_present_transferId = true;
		if (this_present_transferId || that_present_transferId) {
			if (!(this_present_transferId && that_present_transferId))
				return false;
			if (this.transferId != that.transferId)
				return false;
		}

		boolean this_present_rpcVersion = true && this.isSetRpcVersion();
		boolean that_present_rpcVersion = true && that.isSetRpcVersion();
		if (this_present_rpcVersion || that_present_rpcVersion) {
			if (!(this_present_rpcVersion && that_present_rpcVersion))
				return false;
			if (!this.rpcVersion.equals(that.rpcVersion))
				return false;
		}

		boolean this_present_timeout = true;
		boolean that_present_timeout = true;
		if (this_present_timeout || that_present_timeout) {
			if (!(this_present_timeout && that_present_timeout))
				return false;
			if (this.timeout != that.timeout)
				return false;
		}

		boolean this_present_serviceName = true && this.isSetServiceName();
		boolean that_present_serviceName = true && that.isSetServiceName();
		if (this_present_serviceName || that_present_serviceName) {
			if (!(this_present_serviceName && that_present_serviceName))
				return false;
			if (!this.serviceName.equals(that.serviceName))
				return false;
		}

		boolean this_present_methodName = true && this.isSetMethodName();
		boolean that_present_methodName = true && that.isSetMethodName();
		if (this_present_methodName || that_present_methodName) {
			if (!(this_present_methodName && that_present_methodName))
				return false;
			if (!this.methodName.equals(that.methodName))
				return false;
		}

		boolean this_present_parameters = true && this.isSetParameters();
		boolean that_present_parameters = true && that.isSetParameters();
		if (this_present_parameters || that_present_parameters) {
			if (!(this_present_parameters && that_present_parameters))
				return false;
			if (!this.parameters.equals(that.parameters))
				return false;
		}

		boolean this_present_argsClassName = true && this.isSetArgsClassName();
		boolean that_present_argsClassName = true && that.isSetArgsClassName();
		if (this_present_argsClassName || that_present_argsClassName) {
			if (!(this_present_argsClassName && that_present_argsClassName))
				return false;
			if (!this.argsClassName.equals(that.argsClassName))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(Request other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		Request typedOther = (Request) other;

		lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(typedOther.isSetMessageType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMessageType()) {
			lastComparison = TBaseHelper.compareTo(this.messageType, typedOther.messageType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCallType()).compareTo(typedOther.isSetCallType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCallType()) {
			lastComparison = TBaseHelper.compareTo(this.callType, typedOther.callType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTransferId()).compareTo(typedOther.isSetTransferId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransferId()) {
			lastComparison = TBaseHelper.compareTo(this.transferId, typedOther.transferId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRpcVersion()).compareTo(typedOther.isSetRpcVersion());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRpcVersion()) {
			lastComparison = TBaseHelper.compareTo(this.rpcVersion, typedOther.rpcVersion);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTimeout()).compareTo(typedOther.isSetTimeout());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTimeout()) {
			lastComparison = TBaseHelper.compareTo(this.timeout, typedOther.timeout);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetServiceName()) {
			lastComparison = TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMethodName()).compareTo(typedOther.isSetMethodName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMethodName()) {
			lastComparison = TBaseHelper.compareTo(this.methodName, typedOther.methodName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetParameters()) {
			lastComparison = TBaseHelper.compareTo(this.parameters, typedOther.parameters);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetArgsClassName()).compareTo(typedOther.isSetArgsClassName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetArgsClassName()) {
			lastComparison = TBaseHelper.compareTo(this.argsClassName, typedOther.argsClassName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public void read(TProtocol iprot) throws TException {
		TField field;
		iprot.readStructBegin();
		while (true) {
			field = iprot.readFieldBegin();
			if (field.type == TType.STOP) {
				break;
			}
			switch (field.id) {
			case 1: // MESSAGE_TYPE
				if (field.type == TType.I32) {
					this.messageType = iprot.readI32();
					setMessageTypeIsSet(true);
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 2: // CALL_TYPE
				if (field.type == TType.I32) {
					this.callType = iprot.readI32();
					setCallTypeIsSet(true);
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 3: // TRANSFER_ID
				if (field.type == TType.I64) {
					this.transferId = iprot.readI64();
					setTransferIdIsSet(true);
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 4: // RPC_VERSION
				if (field.type == TType.STRING) {
					this.rpcVersion = iprot.readString();
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 5: // TIMEOUT
				if (field.type == TType.I32) {
					this.timeout = iprot.readI32();
					setTimeoutIsSet(true);
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 6: // SERVICE_NAME
				if (field.type == TType.STRING) {
					this.serviceName = iprot.readString();
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 7: // METHOD_NAME
				if (field.type == TType.STRING) {
					this.methodName = iprot.readString();
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 8: // PARAMETERS
				if (field.type == TType.STRING) {
					this.parameters = iprot.readBinary();
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			case 9: // ARGS_CLASS_NAME
				if (field.type == TType.STRING) {
					this.argsClassName = iprot.readString();
				} else {
					TProtocolUtil.skip(iprot, field.type);
				}
				break;
			default:
				TProtocolUtil.skip(iprot, field.type);
			}
			iprot.readFieldEnd();
		}
		iprot.readStructEnd();

		// check for required fields of primitive type, which can't be checked in the validate method
		if (!isSetMessageType()) {
			throw new TProtocolException("Required field 'messageType' was not found in serialized data! Struct: " + toString());
		}
		if (!isSetTransferId()) {
			throw new TProtocolException("Required field 'transferId' was not found in serialized data! Struct: " + toString());
		}
		validate();
	}

	public void write(TProtocol oprot) throws TException {
		validate();

		oprot.writeStructBegin(STRUCT_DESC);
		oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
		oprot.writeI32(this.messageType);
		oprot.writeFieldEnd();
		oprot.writeFieldBegin(CALL_TYPE_FIELD_DESC);
		oprot.writeI32(this.callType);
		oprot.writeFieldEnd();
		oprot.writeFieldBegin(TRANSFER_ID_FIELD_DESC);
		oprot.writeI64(this.transferId);
		oprot.writeFieldEnd();
		if (this.rpcVersion != null) {
			oprot.writeFieldBegin(RPC_VERSION_FIELD_DESC);
			oprot.writeString(this.rpcVersion);
			oprot.writeFieldEnd();
		}
		oprot.writeFieldBegin(TIMEOUT_FIELD_DESC);
		oprot.writeI32(this.timeout);
		oprot.writeFieldEnd();
		if (this.serviceName != null) {
			oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
			oprot.writeString(this.serviceName);
			oprot.writeFieldEnd();
		}
		if (this.methodName != null) {
			oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
			oprot.writeString(this.methodName);
			oprot.writeFieldEnd();
		}
		if (this.parameters != null) {
			oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
			oprot.writeBinary(this.parameters);
			oprot.writeFieldEnd();
		}
		if (this.argsClassName != null) {
			oprot.writeFieldBegin(ARGS_CLASS_NAME_FIELD_DESC);
			oprot.writeString(this.argsClassName);
			oprot.writeFieldEnd();
		}
		oprot.writeFieldStop();
		oprot.writeStructEnd();
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Request(");
		boolean first = true;

		sb.append("messageType:");
		sb.append(this.messageType);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("callType:");
		sb.append(this.callType);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("transferId:");
		sb.append(this.transferId);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("rpcVersion:");
		if (this.rpcVersion == null) {
			sb.append("null");
		} else {
			sb.append(this.rpcVersion);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("timeout:");
		sb.append(this.timeout);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("serviceName:");
		if (this.serviceName == null) {
			sb.append("null");
		} else {
			sb.append(this.serviceName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("methodName:");
		if (this.methodName == null) {
			sb.append("null");
		} else {
			sb.append(this.methodName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("parameters:");
		if (this.parameters == null) {
			sb.append("null");
		} else {
			TBaseHelper.toString(this.parameters, sb);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("argsClassName:");
		if (this.argsClassName == null) {
			sb.append("null");
		} else {
			sb.append(this.argsClassName);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws TException {
		// check for required fields
		// alas, we cannot check 'messageType' because it's a primitive and you chose the non-beans generator.
		// alas, we cannot check 'transferId' because it's a primitive and you chose the non-beans generator.
	}

}
